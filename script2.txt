import os
import zipfile
import openpyxl

# Get the path to the zipped source code and the name of the output Excel file
zip_path = input("Enter the path to the zipped source code: ")
excel_name = input("Enter the name of the output Excel file: ")

# Create a dictionary to store the filenames and sizes from the Excel
excel_files = {}
workbook = openpyxl.load_workbook(excel_name)
worksheet = workbook.active
for row in worksheet.iter_rows(min_row=2, values_only=True):
    file_name = row[0]
    file_extension = row[1]
    file_size = row[2]
    if file_extension:
        excel_files[file_name] = file_size

# Open the zipped folder
with zipfile.ZipFile(zip_path, 'r') as zip_file:

    # Create a new zip file for the updated source code
    zip_output_path = os.path.splitext(zip_path)[0] + '_updated.zip'
    with zipfile.ZipFile(zip_output_path, 'w') as zip_output):

        # Iterate over all the files in the zipped folder
        for file_info in zip_file.infolist():

            # Get the filename, size, and folder path of the file
            file_name = file_info.filename
            file_size = file_info.file_size
            folder_path = os.path.dirname(file_name)

            # If the file is in the Excel, add it to the new zip file
            if file_name in excel_files:
                with zip_file.open(file_name) as file:
                    zip_output.writestr(file_name, file.read())

        # Add any empty folders that were in the original zip file
        for folder_name in zip_file.namelist():
            if folder_name.endswith('/'):
                folder_path = os.path.dirname(folder_name)
                if folder_path not in excel_files and folder_name not in excel_files:
                    zip_output.writestr(folder_name, '')

        # Save the new zip file
        zip_output.close()

# Replace the original zip file with the updated zip file
os.remove(zip_path)
os.rename(zip_output_path, zip_path)